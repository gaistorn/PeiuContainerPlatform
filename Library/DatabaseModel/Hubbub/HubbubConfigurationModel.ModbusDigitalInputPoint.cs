//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using NHibernate template.
// Code is generated on: 2020-04-09 오후 6:44:00
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Collections.Generic;

namespace PeiuPlatform.DataAccessor
{

    /// <summary>
    /// There are no comments for PeiuPlatform.DataAccessor.ModbusDigitalInputPoint, DatabaseModel in the schema.
    /// </summary>
    public partial class ModbusDigitalInputPoint {
    
        #region Extensibility Method Definitions
        
        /// <summary>
        /// There are no comments for OnCreated in the schema.
        /// </summary>
        partial void OnCreated();

        public override bool Equals(object obj)
        {
          ModbusDigitalInputPoint toCompare = obj as ModbusDigitalInputPoint;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.Protocolid, toCompare.Protocolid))
            return false;
          if (!Object.Equals(this.Functioncode, toCompare.Functioncode))
            return false;
          if (!Object.Equals(this.Offset, toCompare.Offset))
            return false;
          if (!Object.Equals(this.Bitflag, toCompare.Bitflag))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + Protocolid.GetHashCode();
          hashCode = (hashCode * 7) + Functioncode.GetHashCode();
          hashCode = (hashCode * 7) + Offset.GetHashCode();
          hashCode = (hashCode * 7) + Bitflag.GetHashCode();
          return hashCode;
        }
        
        #endregion
        /// <summary>
        /// There are no comments for ModbusDigitalInputPoint constructor in the schema.
        /// </summary>
        public ModbusDigitalInputPoint()
        {
            this.Functioncode = 3;
            this.Level = 0;
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Protocolid in the schema.
        /// </summary>
        public virtual int Protocolid
        {
            get;
            set;
        }

    
        /// <summary>
        /// 3  : Holding Register
        /// </summary>
        public virtual short Functioncode
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for Offset in the schema.
        /// </summary>
        public virtual int Offset
        {
            get;
            set;
        }

    
        /// <summary>
        /// value * scale
        /// </summary>
        public virtual short Bitflag
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for Datatypeid in the schema.
        /// </summary>
        public virtual int Datatypeid
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        public virtual string Name
        {
            get;
            set;
        }

    
        /// <summary>
        /// There are no comments for Disable in the schema.
        /// </summary>
        public virtual bool Disable
        {
            get;
            set;
        }

    
        /// <summary>
        /// 1 : PCS
        /// 2 : BMS
        /// 3 : PV
        /// </summary>
        public virtual int Devicetypeid
        {
            get;
            set;
        }

    
        /// <summary>
        /// 0 : status
        /// 1 : low warning 
        /// 2 : high warning
        /// 3 : low fault
        /// 4 : high fault
        /// 5 : critical
        /// </summary>
        public virtual short Level
        {
            get;
            set;
        }
    }

}
